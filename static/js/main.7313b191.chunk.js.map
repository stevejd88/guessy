{"version":3,"sources":["actions/index.js","components/guessedWords/GuessedWords.js","components/congrats/Congrats.js","components/input/Input.js","helpers/index.js","App.js","reportWebVitals.js","reducers/index.js","reducers/successReducer.js","reducers/guessedWordsReducer.js","reducers/secretWordReducer.js","configureStore.js","index.js"],"names":["actionTypes","GuessedWords","props","contents","guessedWords","length","className","data-test","guessedWordsRows","map","word","index","guessedWord","letterMatchCount","Congrats","success","UnconnectedInput","state","currentGuess","submitGuessedWord","bind","e","preventDefault","this","guessWord","setState","form","type","value","onChange","target","placeholder","onClick","Component","connect","dispatch","getState","secretWord","secretLetterSet","Set","split","guessedLetterSet","filter","letter","has","getLetterMatchCount","payload","UnconnectedApp","getSecretWord","Input","options","method","url","params","random","headers","process","axios","request","then","response","data","console","log","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","combineReducers","action","middleware","ReduxThunk","createStoreWithMiddleware","applyMiddleware","createStore","rootReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.7313b191.chunk.js","sourcesContent":["import axios from \"axios\";\n\nimport { getLetterMatchCount } from \"../helpers\";\n\nexport const actionTypes = {\n  CORRECT_GUESS: \"CORRECT_GUESS\",\n  GUESS_WORD: \"GUESS_WORD\",\n  SET_SECRET_WORD: \"SET_SECRET_WORD\"\n};\n\n/**\n * Returns Redux Thunk function that dispatches GUESS_WORD action and (conditionally) CORRECT_GUESS action\n * @function guessWord\n * @param {string} guessWord\n * @returns { function} - Redux Thunk function\n */\nexport const guessWord = (guessedWord) => {\n  return function (dispatch, getState) {\n    const secretWord = getState().secretWord;\n    const letterMatchCount = getLetterMatchCount(guessedWord, secretWord);\n\n    dispatch({\n      type: actionTypes.GUESS_WORD,\n      payload: { guessedWord, letterMatchCount }\n    });\n\n    if (guessedWord === secretWord) {\n      dispatch({ type: actionTypes.CORRECT_GUESS });\n    }\n  };\n};\n\nexport const getSecretWord = () => {\n  const options = {\n    method: \"GET\",\n    url: \"https://wordsapiv1.p.rapidapi.com/words/\",\n    params: { random: \"true\" },\n    headers: {\n      \"x-rapidapi-key\": process.env.REACT_APP_API_KEY,\n      \"x-rapidapi-host\": \"wordsapiv1.p.rapidapi.com\"\n    }\n  };\n  return (dispatch) => {\n    axios\n      .request(options)\n      .then(function (response) {\n        const word = response.data.word.split(\" \");\n        console.log(response.data);\n        console.log(word[0]);\n        dispatch({\n          type: actionTypes.SET_SECRET_WORD,\n          payload: word[0]\n        });\n      })\n      .catch(function (error) {\n        console.error(error);\n      });\n  };\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst GuessedWords = (props) => {\n  let contents;\n  if (props.guessedWords.length === 0) {\n    contents = (\n      <p className='rules' data-test='guess-instructions'>\n        Try to guess the secret word! Matching letters might not be in the same\n        order as your guess.\n      </p>\n    );\n  } else {\n    const guessedWordsRows = props.guessedWords.map((word, index) => (\n      <tr className='body-row' data-test='guessed-word' key={index}>\n        <td>{word.guessedWord}</td>\n        <td>{word.letterMatchCount}</td>\n      </tr>\n    ));\n    contents = (\n      <div data-test='guessed-words'>\n        <h3>Guessed Words</h3>\n        <table className='table table-sm'>\n          <thead className='thead-light'>\n            <tr>\n              <th>Guess</th>\n              <th>Matching Letters</th>\n            </tr>\n          </thead>\n          <tbody>{guessedWordsRows}</tbody>\n        </table>\n      </div>\n    );\n  }\n\n  return <div data-test='component-guessed-word'>{contents}</div>;\n};\n\nGuessedWords.propTypes = {\n  guessedWords: PropTypes.arrayOf(\n    PropTypes.shape({\n      guessedWord: PropTypes.string.isRequired,\n      letterMatchCount: PropTypes.number.isRequired\n    })\n  ).isRequired\n};\n\nexport default GuessedWords;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n/**\n * Functional react component for congratulatory message.\n * @function\n * @param {object} props - React props.\n * @returns {JSX.ELement} - Rendered component (or null if 'success' prop is false)\n */\n\nconst Congrats = (props) => {\n  if (props.success) {\n    return (\n      <div data-test='component-congrats' className='alert alert-success'>\n        <span data-test='congrats-message'>\n          {\" \"}\n          Congratulations! You guessed the word!\n        </span>\n      </div>\n    );\n  } else {\n    return <div data-test='component-congrats' />;\n  }\n};\n\nCongrats.propTypes = {\n  success: PropTypes.bool.isRequired\n};\n\nexport default Congrats;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport { guessWord } from '../../actions';\n\nexport class UnconnectedInput extends Component {\n  /**\n   * @method constructor\n   * @param {object} props - Component props\n   * @returns {undefined}\n   */\n  constructor(props) {\n    super(props);\n\n    // initialize state\n    this.state = { currentGuess: '' };\n\n    // bind this for submitGuessedWord\n    this.submitGuessedWord = this.submitGuessedWord.bind(this);\n  }\n\n  submitGuessedWord(e) {\n    e.preventDefault();\n    const guessedWord = this.state.currentGuess;\n\n    if (guessedWord && guessedWord.length > 0) {\n      this.props.guessWord(guessedWord);\n      this.setState({ currentGuess: '' });\n    }\n  }\n\n  render() {\n    const contents = this.props.success ? null : (\n      <form form='form-inline'>\n        <input\n          data-test='input-box'\n          className='mx-sm-3'\n          type='text'\n          value={this.state.currentGuess}\n          onChange={(e) => this.setState({ currentGuess: e.target.value })}\n          placeholder='enter guess'\n        />\n        <button\n          data-test='submit-button'\n          onClick={(e) => this.submitGuessedWord(e)}\n          type='submit'\n          className='btn btn-primary'\n        >\n          Submit\n        </button>\n      </form>\n    );\n\n    return <div data-test='component-input'> {contents}</div>;\n  }\n}\n\nconst mapStateToProps = ({ success }) => {\n  return { success };\n};\n\nexport default connect(mapStateToProps, { guessWord })(UnconnectedInput);\n","/**\n * @method getLetterMatchCount\n * @param {string} guessedWord - Guessed word.\n * @param {string} secretWord - Secret word.\n * @returns {number} - Number of letter matched between guessedWord and secretWord\n */\n\nexport function getLetterMatchCount(guessedWord, secretWord) {\n  const secretLetterSet = new Set(secretWord.split(\"\"));\n  const guessedLetterSet = new Set(guessedWord.split(\"\"));\n\n  return [...secretLetterSet].filter((letter) => guessedLetterSet.has(letter))\n    .length;\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport './App.css';\n\nimport { getSecretWord } from '../src/actions';\nimport GuessedWords from './components/guessedWords/GuessedWords';\nimport Congrats from './components/congrats/Congrats';\nimport Input from './components/input/Input';\n\nexport class UnconnectedApp extends Component {\n  /**\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    // get secret word\n    this.props.getSecretWord();\n  }\n\n  render() {\n    return (\n      <div className='container'>\n        <h1>Guessy</h1>\n        <Congrats success={this.props.success} />\n        {this.props.secretWord ? <Input /> : null}\n\n        <GuessedWords guessedWords={this.props.guessedWords} />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  const { success, secretWord, guessedWords } = state;\n  return { success, secretWord, guessedWords };\n};\n\nexport default connect(mapStateToProps, { getSecretWord })(UnconnectedApp);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers } from \"redux\";\nimport success from \"./successReducer\";\nimport guessedWords from \"./guessedWordsReducer\";\nimport secretWord from \"./secretWordReducer\";\n\nexport default combineReducers({\n  success,\n  guessedWords,\n  secretWord\n});\n","import { actionTypes } from \"../actions\";\n\n/**\n * @function sucessReducer\n * @param {array} state - Array of guessed words.\n * @param {object} action - action to be reduced\n * @returns {boolean} - new sucess state\n */\nexport default (state = false, action) => {\n  switch (action.type) {\n    case actionTypes.CORRECT_GUESS:\n      return true;\n    default:\n      return state;\n  }\n};\n","import { actionTypes } from \"../actions\";\n\n/**\n * @function guessedWordsReducer\n * @param {array} state -Array of guessed words.\n * @param {object} action - action to be reduced.\n * @returns {array} - new guesseWords state.\n */\nexport default (state = [], action) => {\n  switch (action.type) {\n    case actionTypes.GUESS_WORD:\n      return [...state, action.payload];\n    default:\n      return state;\n  }\n};\n","import { actionTypes } from \"../actions\";\n\n/**\n * @function secretWordReducer\n * @param {string} state - State before reducer.\n * @param {object} action - Action sent to reducer\n * @returns {string} - New state (secret word payload from action)\n */\nexport default (state = null, action) => {\n  switch (action.type) {\n    case actionTypes.SET_SECRET_WORD:\n      return action.payload;\n    default:\n      return state;\n  }\n};\n","import { createStore, applyMiddleware } from \"redux\";\nimport ReduxThunk from \"redux-thunk\";\nimport rootReducer from \"./reducers\";\n\nexport const middleware = [ReduxThunk];\nconst createStoreWithMiddleware = applyMiddleware(...middleware)(createStore);\n\nexport default createStoreWithMiddleware(rootReducer);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport store from \"./configureStore\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}